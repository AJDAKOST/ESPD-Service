//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.11 at 11:41:57 AM CET 
//


package isa.names.specification.ubl.schema.xsd.ccv_commonaggregatecomponents_1;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.DescriptionType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.IDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.TypeCodeType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ContextualDependencyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ContextualDependencyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:isa:names:specification:ubl:schema:xsd:CCV-CommonBasicComponents-1}DependencyTypeCode" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:isa:names:specification:ubl:schema:xsd:CCV-CommonBasicComponents-1}DependencyDescription" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:isa:names:specification:ubl:schema:xsd:CCV-CommonBasicComponents-1}DependencyIdentifierReferenceID"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ContextualDependencyType", propOrder = {
    "dependencyTypeCode",
    "dependencyDescription",
    "dependencyIdentifierReferenceID"
})
public class ContextualDependencyType
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 100L;
    @XmlElement(name = "DependencyTypeCode", namespace = "urn:isa:names:specification:ubl:schema:xsd:CCV-CommonBasicComponents-1")
    protected TypeCodeType dependencyTypeCode;
    @XmlElement(name = "DependencyDescription", namespace = "urn:isa:names:specification:ubl:schema:xsd:CCV-CommonBasicComponents-1")
    protected DescriptionType dependencyDescription;
    @XmlElement(name = "DependencyIdentifierReferenceID", namespace = "urn:isa:names:specification:ubl:schema:xsd:CCV-CommonBasicComponents-1", required = true)
    protected IDType dependencyIdentifierReferenceID;

    /**
     * Gets the value of the dependencyTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link TypeCodeType }
     *     
     */
    public TypeCodeType getDependencyTypeCode() {
        return dependencyTypeCode;
    }

    /**
     * Sets the value of the dependencyTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link TypeCodeType }
     *     
     */
    public void setDependencyTypeCode(TypeCodeType value) {
        this.dependencyTypeCode = value;
    }

    /**
     * Gets the value of the dependencyDescription property.
     * 
     * @return
     *     possible object is
     *     {@link DescriptionType }
     *     
     */
    public DescriptionType getDependencyDescription() {
        return dependencyDescription;
    }

    /**
     * Sets the value of the dependencyDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link DescriptionType }
     *     
     */
    public void setDependencyDescription(DescriptionType value) {
        this.dependencyDescription = value;
    }

    /**
     * Gets the value of the dependencyIdentifierReferenceID property.
     * 
     * @return
     *     possible object is
     *     {@link IDType }
     *     
     */
    public IDType getDependencyIdentifierReferenceID() {
        return dependencyIdentifierReferenceID;
    }

    /**
     * Sets the value of the dependencyIdentifierReferenceID property.
     * 
     * @param value
     *     allowed object is
     *     {@link IDType }
     *     
     */
    public void setDependencyIdentifierReferenceID(IDType value) {
        this.dependencyIdentifierReferenceID = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TypeCodeType theDependencyTypeCode;
            theDependencyTypeCode = this.getDependencyTypeCode();
            strategy.appendField(locator, this, "dependencyTypeCode", buffer, theDependencyTypeCode);
        }
        {
            DescriptionType theDependencyDescription;
            theDependencyDescription = this.getDependencyDescription();
            strategy.appendField(locator, this, "dependencyDescription", buffer, theDependencyDescription);
        }
        {
            IDType theDependencyIdentifierReferenceID;
            theDependencyIdentifierReferenceID = this.getDependencyIdentifierReferenceID();
            strategy.appendField(locator, this, "dependencyIdentifierReferenceID", buffer, theDependencyIdentifierReferenceID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ContextualDependencyType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ContextualDependencyType that = ((ContextualDependencyType) object);
        {
            TypeCodeType lhsDependencyTypeCode;
            lhsDependencyTypeCode = this.getDependencyTypeCode();
            TypeCodeType rhsDependencyTypeCode;
            rhsDependencyTypeCode = that.getDependencyTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependencyTypeCode", lhsDependencyTypeCode), LocatorUtils.property(thatLocator, "dependencyTypeCode", rhsDependencyTypeCode), lhsDependencyTypeCode, rhsDependencyTypeCode)) {
                return false;
            }
        }
        {
            DescriptionType lhsDependencyDescription;
            lhsDependencyDescription = this.getDependencyDescription();
            DescriptionType rhsDependencyDescription;
            rhsDependencyDescription = that.getDependencyDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependencyDescription", lhsDependencyDescription), LocatorUtils.property(thatLocator, "dependencyDescription", rhsDependencyDescription), lhsDependencyDescription, rhsDependencyDescription)) {
                return false;
            }
        }
        {
            IDType lhsDependencyIdentifierReferenceID;
            lhsDependencyIdentifierReferenceID = this.getDependencyIdentifierReferenceID();
            IDType rhsDependencyIdentifierReferenceID;
            rhsDependencyIdentifierReferenceID = that.getDependencyIdentifierReferenceID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependencyIdentifierReferenceID", lhsDependencyIdentifierReferenceID), LocatorUtils.property(thatLocator, "dependencyIdentifierReferenceID", rhsDependencyIdentifierReferenceID), lhsDependencyIdentifierReferenceID, rhsDependencyIdentifierReferenceID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TypeCodeType theDependencyTypeCode;
            theDependencyTypeCode = this.getDependencyTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependencyTypeCode", theDependencyTypeCode), currentHashCode, theDependencyTypeCode);
        }
        {
            DescriptionType theDependencyDescription;
            theDependencyDescription = this.getDependencyDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependencyDescription", theDependencyDescription), currentHashCode, theDependencyDescription);
        }
        {
            IDType theDependencyIdentifierReferenceID;
            theDependencyIdentifierReferenceID = this.getDependencyIdentifierReferenceID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependencyIdentifierReferenceID", theDependencyIdentifierReferenceID), currentHashCode, theDependencyIdentifierReferenceID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
