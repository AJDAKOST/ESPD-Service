//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.11 at 11:41:57 AM CET 
//


package grow.names.specification.ubl.schema.xsd.espd_commonaggregatecomponents_1;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import grow.names.specification.ubl.schema.xsd.espd_commonbasiccomponents_1.IndicatorType;
import oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.PartyType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.IDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.TextType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.TypeCodeType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for EconomicOperatorPartyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="EconomicOperatorPartyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1}EconomicOperatorRoleCode" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1}NationalDataBaseURIID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1}NationalDatabaseAccessCredentials" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1}SMEIndicator" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonAggregateComponents-1}RepresentativeNaturalPerson" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Party" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EconomicOperatorPartyType", propOrder = {
    "economicOperatorRoleCode",
    "nationalDataBaseURIID",
    "nationalDatabaseAccessCredentials",
    "smeIndicator",
    "representativeNaturalPerson",
    "party"
})
public class EconomicOperatorPartyType
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 100L;
    @XmlElement(name = "EconomicOperatorRoleCode", namespace = "urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1")
    protected TypeCodeType economicOperatorRoleCode;
    @XmlElement(name = "NationalDataBaseURIID", namespace = "urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1")
    protected IDType nationalDataBaseURIID;
    @XmlElement(name = "NationalDatabaseAccessCredentials", namespace = "urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1")
    protected TextType nationalDatabaseAccessCredentials;
    @XmlElement(name = "SMEIndicator", namespace = "urn:grow:names:specification:ubl:schema:xsd:ESPD-CommonBasicComponents-1")
    protected IndicatorType smeIndicator;
    @XmlElement(name = "RepresentativeNaturalPerson")
    protected List<NaturalPersonType> representativeNaturalPerson;
    @XmlElement(name = "Party", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2")
    protected PartyType party;

    /**
     * Gets the value of the economicOperatorRoleCode property.
     * 
     * @return
     *     possible object is
     *     {@link TypeCodeType }
     *     
     */
    public TypeCodeType getEconomicOperatorRoleCode() {
        return economicOperatorRoleCode;
    }

    /**
     * Sets the value of the economicOperatorRoleCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link TypeCodeType }
     *     
     */
    public void setEconomicOperatorRoleCode(TypeCodeType value) {
        this.economicOperatorRoleCode = value;
    }

    /**
     * Gets the value of the nationalDataBaseURIID property.
     * 
     * @return
     *     possible object is
     *     {@link IDType }
     *     
     */
    public IDType getNationalDataBaseURIID() {
        return nationalDataBaseURIID;
    }

    /**
     * Sets the value of the nationalDataBaseURIID property.
     * 
     * @param value
     *     allowed object is
     *     {@link IDType }
     *     
     */
    public void setNationalDataBaseURIID(IDType value) {
        this.nationalDataBaseURIID = value;
    }

    /**
     * Gets the value of the nationalDatabaseAccessCredentials property.
     * 
     * @return
     *     possible object is
     *     {@link TextType }
     *     
     */
    public TextType getNationalDatabaseAccessCredentials() {
        return nationalDatabaseAccessCredentials;
    }

    /**
     * Sets the value of the nationalDatabaseAccessCredentials property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextType }
     *     
     */
    public void setNationalDatabaseAccessCredentials(TextType value) {
        this.nationalDatabaseAccessCredentials = value;
    }

    /**
     * Gets the value of the smeIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link IndicatorType }
     *     
     */
    public IndicatorType getSMEIndicator() {
        return smeIndicator;
    }

    /**
     * Sets the value of the smeIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link IndicatorType }
     *     
     */
    public void setSMEIndicator(IndicatorType value) {
        this.smeIndicator = value;
    }

    /**
     * Gets the value of the representativeNaturalPerson property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representativeNaturalPerson property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentativeNaturalPerson().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NaturalPersonType }
     * 
     * 
     */
    public List<NaturalPersonType> getRepresentativeNaturalPerson() {
        if (representativeNaturalPerson == null) {
            representativeNaturalPerson = new ArrayList<NaturalPersonType>();
        }
        return this.representativeNaturalPerson;
    }

    /**
     * Gets the value of the party property.
     * 
     * @return
     *     possible object is
     *     {@link PartyType }
     *     
     */
    public PartyType getParty() {
        return party;
    }

    /**
     * Sets the value of the party property.
     * 
     * @param value
     *     allowed object is
     *     {@link PartyType }
     *     
     */
    public void setParty(PartyType value) {
        this.party = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TypeCodeType theEconomicOperatorRoleCode;
            theEconomicOperatorRoleCode = this.getEconomicOperatorRoleCode();
            strategy.appendField(locator, this, "economicOperatorRoleCode", buffer, theEconomicOperatorRoleCode);
        }
        {
            IDType theNationalDataBaseURIID;
            theNationalDataBaseURIID = this.getNationalDataBaseURIID();
            strategy.appendField(locator, this, "nationalDataBaseURIID", buffer, theNationalDataBaseURIID);
        }
        {
            TextType theNationalDatabaseAccessCredentials;
            theNationalDatabaseAccessCredentials = this.getNationalDatabaseAccessCredentials();
            strategy.appendField(locator, this, "nationalDatabaseAccessCredentials", buffer, theNationalDatabaseAccessCredentials);
        }
        {
            IndicatorType theSMEIndicator;
            theSMEIndicator = this.getSMEIndicator();
            strategy.appendField(locator, this, "smeIndicator", buffer, theSMEIndicator);
        }
        {
            List<NaturalPersonType> theRepresentativeNaturalPerson;
            theRepresentativeNaturalPerson = (((this.representativeNaturalPerson!= null)&&(!this.representativeNaturalPerson.isEmpty()))?this.getRepresentativeNaturalPerson():null);
            strategy.appendField(locator, this, "representativeNaturalPerson", buffer, theRepresentativeNaturalPerson);
        }
        {
            PartyType theParty;
            theParty = this.getParty();
            strategy.appendField(locator, this, "party", buffer, theParty);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof EconomicOperatorPartyType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EconomicOperatorPartyType that = ((EconomicOperatorPartyType) object);
        {
            TypeCodeType lhsEconomicOperatorRoleCode;
            lhsEconomicOperatorRoleCode = this.getEconomicOperatorRoleCode();
            TypeCodeType rhsEconomicOperatorRoleCode;
            rhsEconomicOperatorRoleCode = that.getEconomicOperatorRoleCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "economicOperatorRoleCode", lhsEconomicOperatorRoleCode), LocatorUtils.property(thatLocator, "economicOperatorRoleCode", rhsEconomicOperatorRoleCode), lhsEconomicOperatorRoleCode, rhsEconomicOperatorRoleCode)) {
                return false;
            }
        }
        {
            IDType lhsNationalDataBaseURIID;
            lhsNationalDataBaseURIID = this.getNationalDataBaseURIID();
            IDType rhsNationalDataBaseURIID;
            rhsNationalDataBaseURIID = that.getNationalDataBaseURIID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nationalDataBaseURIID", lhsNationalDataBaseURIID), LocatorUtils.property(thatLocator, "nationalDataBaseURIID", rhsNationalDataBaseURIID), lhsNationalDataBaseURIID, rhsNationalDataBaseURIID)) {
                return false;
            }
        }
        {
            TextType lhsNationalDatabaseAccessCredentials;
            lhsNationalDatabaseAccessCredentials = this.getNationalDatabaseAccessCredentials();
            TextType rhsNationalDatabaseAccessCredentials;
            rhsNationalDatabaseAccessCredentials = that.getNationalDatabaseAccessCredentials();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nationalDatabaseAccessCredentials", lhsNationalDatabaseAccessCredentials), LocatorUtils.property(thatLocator, "nationalDatabaseAccessCredentials", rhsNationalDatabaseAccessCredentials), lhsNationalDatabaseAccessCredentials, rhsNationalDatabaseAccessCredentials)) {
                return false;
            }
        }
        {
            IndicatorType lhsSMEIndicator;
            lhsSMEIndicator = this.getSMEIndicator();
            IndicatorType rhsSMEIndicator;
            rhsSMEIndicator = that.getSMEIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "smeIndicator", lhsSMEIndicator), LocatorUtils.property(thatLocator, "smeIndicator", rhsSMEIndicator), lhsSMEIndicator, rhsSMEIndicator)) {
                return false;
            }
        }
        {
            List<NaturalPersonType> lhsRepresentativeNaturalPerson;
            lhsRepresentativeNaturalPerson = (((this.representativeNaturalPerson!= null)&&(!this.representativeNaturalPerson.isEmpty()))?this.getRepresentativeNaturalPerson():null);
            List<NaturalPersonType> rhsRepresentativeNaturalPerson;
            rhsRepresentativeNaturalPerson = (((that.representativeNaturalPerson!= null)&&(!that.representativeNaturalPerson.isEmpty()))?that.getRepresentativeNaturalPerson():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "representativeNaturalPerson", lhsRepresentativeNaturalPerson), LocatorUtils.property(thatLocator, "representativeNaturalPerson", rhsRepresentativeNaturalPerson), lhsRepresentativeNaturalPerson, rhsRepresentativeNaturalPerson)) {
                return false;
            }
        }
        {
            PartyType lhsParty;
            lhsParty = this.getParty();
            PartyType rhsParty;
            rhsParty = that.getParty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "party", lhsParty), LocatorUtils.property(thatLocator, "party", rhsParty), lhsParty, rhsParty)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TypeCodeType theEconomicOperatorRoleCode;
            theEconomicOperatorRoleCode = this.getEconomicOperatorRoleCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "economicOperatorRoleCode", theEconomicOperatorRoleCode), currentHashCode, theEconomicOperatorRoleCode);
        }
        {
            IDType theNationalDataBaseURIID;
            theNationalDataBaseURIID = this.getNationalDataBaseURIID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nationalDataBaseURIID", theNationalDataBaseURIID), currentHashCode, theNationalDataBaseURIID);
        }
        {
            TextType theNationalDatabaseAccessCredentials;
            theNationalDatabaseAccessCredentials = this.getNationalDatabaseAccessCredentials();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nationalDatabaseAccessCredentials", theNationalDatabaseAccessCredentials), currentHashCode, theNationalDatabaseAccessCredentials);
        }
        {
            IndicatorType theSMEIndicator;
            theSMEIndicator = this.getSMEIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "smeIndicator", theSMEIndicator), currentHashCode, theSMEIndicator);
        }
        {
            List<NaturalPersonType> theRepresentativeNaturalPerson;
            theRepresentativeNaturalPerson = (((this.representativeNaturalPerson!= null)&&(!this.representativeNaturalPerson.isEmpty()))?this.getRepresentativeNaturalPerson():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "representativeNaturalPerson", theRepresentativeNaturalPerson), currentHashCode, theRepresentativeNaturalPerson);
        }
        {
            PartyType theParty;
            theParty = this.getParty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "party", theParty), currentHashCode, theParty);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
