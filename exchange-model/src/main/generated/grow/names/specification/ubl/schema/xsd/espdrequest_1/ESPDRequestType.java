//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.11 at 11:41:57 AM CET 
//


package grow.names.specification.ubl.schema.xsd.espdrequest_1;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import isa.names.specification.ubl.schema.xsd.ccv_commonaggregatecomponents_1.CriterionType;
import oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.ContractingPartyType;
import oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.ProcurementProjectLotType;
import oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.ServiceProviderPartyType;
import oasis.names.specification.ubl.schema.xsd.commonaggregatecomponents_2.SignatureType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.ContractFolderIDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.CopyIndicatorType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.CustomizationIDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.IDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.IssueDateType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.IssueTimeType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.PreviousVersionIDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.ProfileExecutionIDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.ProfileIDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.UBLVersionIDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.UUIDType;
import oasis.names.specification.ubl.schema.xsd.commonbasiccomponents_2.VersionIDType;
import oasis.names.specification.ubl.schema.xsd.commonextensioncomponents_2.UBLExtensionsType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ESPDRequestType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ESPDRequestType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2}UBLExtensions" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}UBLVersionID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}CustomizationID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ProfileID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ProfileExecutionID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ID"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}CopyIndicator" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}UUID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}VersionID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}PreviousVersionID" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}IssueDate"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}IssueTime" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2}ContractFolderID"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ContractingParty" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ProcurementProjectLot" maxOccurs="unbounded"/&gt;
 *         &lt;element ref="{urn:isa:names:specification:ubl:schema:xsd:CCV-CommonAggregateComponents-1}Criterion" maxOccurs="unbounded"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}ServiceProviderParty" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2}Signature" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ESPDRequestType", propOrder = {
    "ublExtensions",
    "ublVersionID",
    "customizationID",
    "profileID",
    "profileExecutionID",
    "id",
    "copyIndicator",
    "uuid",
    "versionID",
    "previousVersionID",
    "issueDate",
    "issueTime",
    "contractFolderID",
    "contractingParty",
    "procurementProjectLot",
    "criterion",
    "serviceProviderParty",
    "signature"
})
public class ESPDRequestType
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 100L;
    @XmlElement(name = "UBLExtensions", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2")
    protected UBLExtensionsType ublExtensions;
    @XmlElement(name = "UBLVersionID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected UBLVersionIDType ublVersionID;
    @XmlElement(name = "CustomizationID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected CustomizationIDType customizationID;
    @XmlElement(name = "ProfileID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected ProfileIDType profileID;
    @XmlElement(name = "ProfileExecutionID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected ProfileExecutionIDType profileExecutionID;
    @XmlElement(name = "ID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", required = true)
    protected IDType id;
    @XmlElement(name = "CopyIndicator", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected CopyIndicatorType copyIndicator;
    @XmlElement(name = "UUID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected UUIDType uuid;
    @XmlElement(name = "VersionID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected VersionIDType versionID;
    @XmlElement(name = "PreviousVersionID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected PreviousVersionIDType previousVersionID;
    @XmlElement(name = "IssueDate", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", required = true)
    protected IssueDateType issueDate;
    @XmlElement(name = "IssueTime", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
    protected IssueTimeType issueTime;
    @XmlElement(name = "ContractFolderID", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2", required = true)
    protected ContractFolderIDType contractFolderID;
    @XmlElement(name = "ContractingParty", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2")
    protected ContractingPartyType contractingParty;
    @XmlElement(name = "ProcurementProjectLot", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2", required = true)
    protected List<ProcurementProjectLotType> procurementProjectLot;
    @XmlElement(name = "Criterion", namespace = "urn:isa:names:specification:ubl:schema:xsd:CCV-CommonAggregateComponents-1", required = true)
    protected List<CriterionType> criterion;
    @XmlElement(name = "ServiceProviderParty", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2")
    protected ServiceProviderPartyType serviceProviderParty;
    @XmlElement(name = "Signature", namespace = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2")
    protected List<SignatureType> signature;

    /**
     * Gets the value of the ublExtensions property.
     * 
     * @return
     *     possible object is
     *     {@link UBLExtensionsType }
     *     
     */
    public UBLExtensionsType getUBLExtensions() {
        return ublExtensions;
    }

    /**
     * Sets the value of the ublExtensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link UBLExtensionsType }
     *     
     */
    public void setUBLExtensions(UBLExtensionsType value) {
        this.ublExtensions = value;
    }

    /**
     * Gets the value of the ublVersionID property.
     * 
     * @return
     *     possible object is
     *     {@link UBLVersionIDType }
     *     
     */
    public UBLVersionIDType getUBLVersionID() {
        return ublVersionID;
    }

    /**
     * Sets the value of the ublVersionID property.
     * 
     * @param value
     *     allowed object is
     *     {@link UBLVersionIDType }
     *     
     */
    public void setUBLVersionID(UBLVersionIDType value) {
        this.ublVersionID = value;
    }

    /**
     * Gets the value of the customizationID property.
     * 
     * @return
     *     possible object is
     *     {@link CustomizationIDType }
     *     
     */
    public CustomizationIDType getCustomizationID() {
        return customizationID;
    }

    /**
     * Sets the value of the customizationID property.
     * 
     * @param value
     *     allowed object is
     *     {@link CustomizationIDType }
     *     
     */
    public void setCustomizationID(CustomizationIDType value) {
        this.customizationID = value;
    }

    /**
     * Gets the value of the profileID property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileIDType }
     *     
     */
    public ProfileIDType getProfileID() {
        return profileID;
    }

    /**
     * Sets the value of the profileID property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileIDType }
     *     
     */
    public void setProfileID(ProfileIDType value) {
        this.profileID = value;
    }

    /**
     * Gets the value of the profileExecutionID property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileExecutionIDType }
     *     
     */
    public ProfileExecutionIDType getProfileExecutionID() {
        return profileExecutionID;
    }

    /**
     * Sets the value of the profileExecutionID property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileExecutionIDType }
     *     
     */
    public void setProfileExecutionID(ProfileExecutionIDType value) {
        this.profileExecutionID = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link IDType }
     *     
     */
    public IDType getID() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link IDType }
     *     
     */
    public void setID(IDType value) {
        this.id = value;
    }

    /**
     * Gets the value of the copyIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link CopyIndicatorType }
     *     
     */
    public CopyIndicatorType getCopyIndicator() {
        return copyIndicator;
    }

    /**
     * Sets the value of the copyIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link CopyIndicatorType }
     *     
     */
    public void setCopyIndicator(CopyIndicatorType value) {
        this.copyIndicator = value;
    }

    /**
     * Gets the value of the uuid property.
     * 
     * @return
     *     possible object is
     *     {@link UUIDType }
     *     
     */
    public UUIDType getUUID() {
        return uuid;
    }

    /**
     * Sets the value of the uuid property.
     * 
     * @param value
     *     allowed object is
     *     {@link UUIDType }
     *     
     */
    public void setUUID(UUIDType value) {
        this.uuid = value;
    }

    /**
     * Gets the value of the versionID property.
     * 
     * @return
     *     possible object is
     *     {@link VersionIDType }
     *     
     */
    public VersionIDType getVersionID() {
        return versionID;
    }

    /**
     * Sets the value of the versionID property.
     * 
     * @param value
     *     allowed object is
     *     {@link VersionIDType }
     *     
     */
    public void setVersionID(VersionIDType value) {
        this.versionID = value;
    }

    /**
     * Gets the value of the previousVersionID property.
     * 
     * @return
     *     possible object is
     *     {@link PreviousVersionIDType }
     *     
     */
    public PreviousVersionIDType getPreviousVersionID() {
        return previousVersionID;
    }

    /**
     * Sets the value of the previousVersionID property.
     * 
     * @param value
     *     allowed object is
     *     {@link PreviousVersionIDType }
     *     
     */
    public void setPreviousVersionID(PreviousVersionIDType value) {
        this.previousVersionID = value;
    }

    /**
     * Gets the value of the issueDate property.
     * 
     * @return
     *     possible object is
     *     {@link IssueDateType }
     *     
     */
    public IssueDateType getIssueDate() {
        return issueDate;
    }

    /**
     * Sets the value of the issueDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IssueDateType }
     *     
     */
    public void setIssueDate(IssueDateType value) {
        this.issueDate = value;
    }

    /**
     * Gets the value of the issueTime property.
     * 
     * @return
     *     possible object is
     *     {@link IssueTimeType }
     *     
     */
    public IssueTimeType getIssueTime() {
        return issueTime;
    }

    /**
     * Sets the value of the issueTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link IssueTimeType }
     *     
     */
    public void setIssueTime(IssueTimeType value) {
        this.issueTime = value;
    }

    /**
     * Gets the value of the contractFolderID property.
     * 
     * @return
     *     possible object is
     *     {@link ContractFolderIDType }
     *     
     */
    public ContractFolderIDType getContractFolderID() {
        return contractFolderID;
    }

    /**
     * Sets the value of the contractFolderID property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContractFolderIDType }
     *     
     */
    public void setContractFolderID(ContractFolderIDType value) {
        this.contractFolderID = value;
    }

    /**
     * Gets the value of the contractingParty property.
     * 
     * @return
     *     possible object is
     *     {@link ContractingPartyType }
     *     
     */
    public ContractingPartyType getContractingParty() {
        return contractingParty;
    }

    /**
     * Sets the value of the contractingParty property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContractingPartyType }
     *     
     */
    public void setContractingParty(ContractingPartyType value) {
        this.contractingParty = value;
    }

    /**
     * Gets the value of the procurementProjectLot property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the procurementProjectLot property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcurementProjectLot().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProcurementProjectLotType }
     * 
     * 
     */
    public List<ProcurementProjectLotType> getProcurementProjectLot() {
        if (procurementProjectLot == null) {
            procurementProjectLot = new ArrayList<ProcurementProjectLotType>();
        }
        return this.procurementProjectLot;
    }

    /**
     * Gets the value of the criterion property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the criterion property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCriterion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CriterionType }
     * 
     * 
     */
    public List<CriterionType> getCriterion() {
        if (criterion == null) {
            criterion = new ArrayList<CriterionType>();
        }
        return this.criterion;
    }

    /**
     * Gets the value of the serviceProviderParty property.
     * 
     * @return
     *     possible object is
     *     {@link ServiceProviderPartyType }
     *     
     */
    public ServiceProviderPartyType getServiceProviderParty() {
        return serviceProviderParty;
    }

    /**
     * Sets the value of the serviceProviderParty property.
     * 
     * @param value
     *     allowed object is
     *     {@link ServiceProviderPartyType }
     *     
     */
    public void setServiceProviderParty(ServiceProviderPartyType value) {
        this.serviceProviderParty = value;
    }

    /**
     * Gets the value of the signature property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the signature property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSignature().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SignatureType }
     * 
     * 
     */
    public List<SignatureType> getSignature() {
        if (signature == null) {
            signature = new ArrayList<SignatureType>();
        }
        return this.signature;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            UBLExtensionsType theUBLExtensions;
            theUBLExtensions = this.getUBLExtensions();
            strategy.appendField(locator, this, "ublExtensions", buffer, theUBLExtensions);
        }
        {
            UBLVersionIDType theUBLVersionID;
            theUBLVersionID = this.getUBLVersionID();
            strategy.appendField(locator, this, "ublVersionID", buffer, theUBLVersionID);
        }
        {
            CustomizationIDType theCustomizationID;
            theCustomizationID = this.getCustomizationID();
            strategy.appendField(locator, this, "customizationID", buffer, theCustomizationID);
        }
        {
            ProfileIDType theProfileID;
            theProfileID = this.getProfileID();
            strategy.appendField(locator, this, "profileID", buffer, theProfileID);
        }
        {
            ProfileExecutionIDType theProfileExecutionID;
            theProfileExecutionID = this.getProfileExecutionID();
            strategy.appendField(locator, this, "profileExecutionID", buffer, theProfileExecutionID);
        }
        {
            IDType theID;
            theID = this.getID();
            strategy.appendField(locator, this, "id", buffer, theID);
        }
        {
            CopyIndicatorType theCopyIndicator;
            theCopyIndicator = this.getCopyIndicator();
            strategy.appendField(locator, this, "copyIndicator", buffer, theCopyIndicator);
        }
        {
            UUIDType theUUID;
            theUUID = this.getUUID();
            strategy.appendField(locator, this, "uuid", buffer, theUUID);
        }
        {
            VersionIDType theVersionID;
            theVersionID = this.getVersionID();
            strategy.appendField(locator, this, "versionID", buffer, theVersionID);
        }
        {
            PreviousVersionIDType thePreviousVersionID;
            thePreviousVersionID = this.getPreviousVersionID();
            strategy.appendField(locator, this, "previousVersionID", buffer, thePreviousVersionID);
        }
        {
            IssueDateType theIssueDate;
            theIssueDate = this.getIssueDate();
            strategy.appendField(locator, this, "issueDate", buffer, theIssueDate);
        }
        {
            IssueTimeType theIssueTime;
            theIssueTime = this.getIssueTime();
            strategy.appendField(locator, this, "issueTime", buffer, theIssueTime);
        }
        {
            ContractFolderIDType theContractFolderID;
            theContractFolderID = this.getContractFolderID();
            strategy.appendField(locator, this, "contractFolderID", buffer, theContractFolderID);
        }
        {
            ContractingPartyType theContractingParty;
            theContractingParty = this.getContractingParty();
            strategy.appendField(locator, this, "contractingParty", buffer, theContractingParty);
        }
        {
            List<ProcurementProjectLotType> theProcurementProjectLot;
            theProcurementProjectLot = (((this.procurementProjectLot!= null)&&(!this.procurementProjectLot.isEmpty()))?this.getProcurementProjectLot():null);
            strategy.appendField(locator, this, "procurementProjectLot", buffer, theProcurementProjectLot);
        }
        {
            List<CriterionType> theCriterion;
            theCriterion = (((this.criterion!= null)&&(!this.criterion.isEmpty()))?this.getCriterion():null);
            strategy.appendField(locator, this, "criterion", buffer, theCriterion);
        }
        {
            ServiceProviderPartyType theServiceProviderParty;
            theServiceProviderParty = this.getServiceProviderParty();
            strategy.appendField(locator, this, "serviceProviderParty", buffer, theServiceProviderParty);
        }
        {
            List<SignatureType> theSignature;
            theSignature = (((this.signature!= null)&&(!this.signature.isEmpty()))?this.getSignature():null);
            strategy.appendField(locator, this, "signature", buffer, theSignature);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ESPDRequestType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ESPDRequestType that = ((ESPDRequestType) object);
        {
            UBLExtensionsType lhsUBLExtensions;
            lhsUBLExtensions = this.getUBLExtensions();
            UBLExtensionsType rhsUBLExtensions;
            rhsUBLExtensions = that.getUBLExtensions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ublExtensions", lhsUBLExtensions), LocatorUtils.property(thatLocator, "ublExtensions", rhsUBLExtensions), lhsUBLExtensions, rhsUBLExtensions)) {
                return false;
            }
        }
        {
            UBLVersionIDType lhsUBLVersionID;
            lhsUBLVersionID = this.getUBLVersionID();
            UBLVersionIDType rhsUBLVersionID;
            rhsUBLVersionID = that.getUBLVersionID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ublVersionID", lhsUBLVersionID), LocatorUtils.property(thatLocator, "ublVersionID", rhsUBLVersionID), lhsUBLVersionID, rhsUBLVersionID)) {
                return false;
            }
        }
        {
            CustomizationIDType lhsCustomizationID;
            lhsCustomizationID = this.getCustomizationID();
            CustomizationIDType rhsCustomizationID;
            rhsCustomizationID = that.getCustomizationID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "customizationID", lhsCustomizationID), LocatorUtils.property(thatLocator, "customizationID", rhsCustomizationID), lhsCustomizationID, rhsCustomizationID)) {
                return false;
            }
        }
        {
            ProfileIDType lhsProfileID;
            lhsProfileID = this.getProfileID();
            ProfileIDType rhsProfileID;
            rhsProfileID = that.getProfileID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profileID", lhsProfileID), LocatorUtils.property(thatLocator, "profileID", rhsProfileID), lhsProfileID, rhsProfileID)) {
                return false;
            }
        }
        {
            ProfileExecutionIDType lhsProfileExecutionID;
            lhsProfileExecutionID = this.getProfileExecutionID();
            ProfileExecutionIDType rhsProfileExecutionID;
            rhsProfileExecutionID = that.getProfileExecutionID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profileExecutionID", lhsProfileExecutionID), LocatorUtils.property(thatLocator, "profileExecutionID", rhsProfileExecutionID), lhsProfileExecutionID, rhsProfileExecutionID)) {
                return false;
            }
        }
        {
            IDType lhsID;
            lhsID = this.getID();
            IDType rhsID;
            rhsID = that.getID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsID), LocatorUtils.property(thatLocator, "id", rhsID), lhsID, rhsID)) {
                return false;
            }
        }
        {
            CopyIndicatorType lhsCopyIndicator;
            lhsCopyIndicator = this.getCopyIndicator();
            CopyIndicatorType rhsCopyIndicator;
            rhsCopyIndicator = that.getCopyIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "copyIndicator", lhsCopyIndicator), LocatorUtils.property(thatLocator, "copyIndicator", rhsCopyIndicator), lhsCopyIndicator, rhsCopyIndicator)) {
                return false;
            }
        }
        {
            UUIDType lhsUUID;
            lhsUUID = this.getUUID();
            UUIDType rhsUUID;
            rhsUUID = that.getUUID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uuid", lhsUUID), LocatorUtils.property(thatLocator, "uuid", rhsUUID), lhsUUID, rhsUUID)) {
                return false;
            }
        }
        {
            VersionIDType lhsVersionID;
            lhsVersionID = this.getVersionID();
            VersionIDType rhsVersionID;
            rhsVersionID = that.getVersionID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "versionID", lhsVersionID), LocatorUtils.property(thatLocator, "versionID", rhsVersionID), lhsVersionID, rhsVersionID)) {
                return false;
            }
        }
        {
            PreviousVersionIDType lhsPreviousVersionID;
            lhsPreviousVersionID = this.getPreviousVersionID();
            PreviousVersionIDType rhsPreviousVersionID;
            rhsPreviousVersionID = that.getPreviousVersionID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "previousVersionID", lhsPreviousVersionID), LocatorUtils.property(thatLocator, "previousVersionID", rhsPreviousVersionID), lhsPreviousVersionID, rhsPreviousVersionID)) {
                return false;
            }
        }
        {
            IssueDateType lhsIssueDate;
            lhsIssueDate = this.getIssueDate();
            IssueDateType rhsIssueDate;
            rhsIssueDate = that.getIssueDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issueDate", lhsIssueDate), LocatorUtils.property(thatLocator, "issueDate", rhsIssueDate), lhsIssueDate, rhsIssueDate)) {
                return false;
            }
        }
        {
            IssueTimeType lhsIssueTime;
            lhsIssueTime = this.getIssueTime();
            IssueTimeType rhsIssueTime;
            rhsIssueTime = that.getIssueTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issueTime", lhsIssueTime), LocatorUtils.property(thatLocator, "issueTime", rhsIssueTime), lhsIssueTime, rhsIssueTime)) {
                return false;
            }
        }
        {
            ContractFolderIDType lhsContractFolderID;
            lhsContractFolderID = this.getContractFolderID();
            ContractFolderIDType rhsContractFolderID;
            rhsContractFolderID = that.getContractFolderID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contractFolderID", lhsContractFolderID), LocatorUtils.property(thatLocator, "contractFolderID", rhsContractFolderID), lhsContractFolderID, rhsContractFolderID)) {
                return false;
            }
        }
        {
            ContractingPartyType lhsContractingParty;
            lhsContractingParty = this.getContractingParty();
            ContractingPartyType rhsContractingParty;
            rhsContractingParty = that.getContractingParty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contractingParty", lhsContractingParty), LocatorUtils.property(thatLocator, "contractingParty", rhsContractingParty), lhsContractingParty, rhsContractingParty)) {
                return false;
            }
        }
        {
            List<ProcurementProjectLotType> lhsProcurementProjectLot;
            lhsProcurementProjectLot = (((this.procurementProjectLot!= null)&&(!this.procurementProjectLot.isEmpty()))?this.getProcurementProjectLot():null);
            List<ProcurementProjectLotType> rhsProcurementProjectLot;
            rhsProcurementProjectLot = (((that.procurementProjectLot!= null)&&(!that.procurementProjectLot.isEmpty()))?that.getProcurementProjectLot():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "procurementProjectLot", lhsProcurementProjectLot), LocatorUtils.property(thatLocator, "procurementProjectLot", rhsProcurementProjectLot), lhsProcurementProjectLot, rhsProcurementProjectLot)) {
                return false;
            }
        }
        {
            List<CriterionType> lhsCriterion;
            lhsCriterion = (((this.criterion!= null)&&(!this.criterion.isEmpty()))?this.getCriterion():null);
            List<CriterionType> rhsCriterion;
            rhsCriterion = (((that.criterion!= null)&&(!that.criterion.isEmpty()))?that.getCriterion():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "criterion", lhsCriterion), LocatorUtils.property(thatLocator, "criterion", rhsCriterion), lhsCriterion, rhsCriterion)) {
                return false;
            }
        }
        {
            ServiceProviderPartyType lhsServiceProviderParty;
            lhsServiceProviderParty = this.getServiceProviderParty();
            ServiceProviderPartyType rhsServiceProviderParty;
            rhsServiceProviderParty = that.getServiceProviderParty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceProviderParty", lhsServiceProviderParty), LocatorUtils.property(thatLocator, "serviceProviderParty", rhsServiceProviderParty), lhsServiceProviderParty, rhsServiceProviderParty)) {
                return false;
            }
        }
        {
            List<SignatureType> lhsSignature;
            lhsSignature = (((this.signature!= null)&&(!this.signature.isEmpty()))?this.getSignature():null);
            List<SignatureType> rhsSignature;
            rhsSignature = (((that.signature!= null)&&(!that.signature.isEmpty()))?that.getSignature():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "signature", lhsSignature), LocatorUtils.property(thatLocator, "signature", rhsSignature), lhsSignature, rhsSignature)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            UBLExtensionsType theUBLExtensions;
            theUBLExtensions = this.getUBLExtensions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ublExtensions", theUBLExtensions), currentHashCode, theUBLExtensions);
        }
        {
            UBLVersionIDType theUBLVersionID;
            theUBLVersionID = this.getUBLVersionID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ublVersionID", theUBLVersionID), currentHashCode, theUBLVersionID);
        }
        {
            CustomizationIDType theCustomizationID;
            theCustomizationID = this.getCustomizationID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "customizationID", theCustomizationID), currentHashCode, theCustomizationID);
        }
        {
            ProfileIDType theProfileID;
            theProfileID = this.getProfileID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profileID", theProfileID), currentHashCode, theProfileID);
        }
        {
            ProfileExecutionIDType theProfileExecutionID;
            theProfileExecutionID = this.getProfileExecutionID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profileExecutionID", theProfileExecutionID), currentHashCode, theProfileExecutionID);
        }
        {
            IDType theID;
            theID = this.getID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theID), currentHashCode, theID);
        }
        {
            CopyIndicatorType theCopyIndicator;
            theCopyIndicator = this.getCopyIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "copyIndicator", theCopyIndicator), currentHashCode, theCopyIndicator);
        }
        {
            UUIDType theUUID;
            theUUID = this.getUUID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uuid", theUUID), currentHashCode, theUUID);
        }
        {
            VersionIDType theVersionID;
            theVersionID = this.getVersionID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "versionID", theVersionID), currentHashCode, theVersionID);
        }
        {
            PreviousVersionIDType thePreviousVersionID;
            thePreviousVersionID = this.getPreviousVersionID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "previousVersionID", thePreviousVersionID), currentHashCode, thePreviousVersionID);
        }
        {
            IssueDateType theIssueDate;
            theIssueDate = this.getIssueDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issueDate", theIssueDate), currentHashCode, theIssueDate);
        }
        {
            IssueTimeType theIssueTime;
            theIssueTime = this.getIssueTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issueTime", theIssueTime), currentHashCode, theIssueTime);
        }
        {
            ContractFolderIDType theContractFolderID;
            theContractFolderID = this.getContractFolderID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contractFolderID", theContractFolderID), currentHashCode, theContractFolderID);
        }
        {
            ContractingPartyType theContractingParty;
            theContractingParty = this.getContractingParty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contractingParty", theContractingParty), currentHashCode, theContractingParty);
        }
        {
            List<ProcurementProjectLotType> theProcurementProjectLot;
            theProcurementProjectLot = (((this.procurementProjectLot!= null)&&(!this.procurementProjectLot.isEmpty()))?this.getProcurementProjectLot():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "procurementProjectLot", theProcurementProjectLot), currentHashCode, theProcurementProjectLot);
        }
        {
            List<CriterionType> theCriterion;
            theCriterion = (((this.criterion!= null)&&(!this.criterion.isEmpty()))?this.getCriterion():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "criterion", theCriterion), currentHashCode, theCriterion);
        }
        {
            ServiceProviderPartyType theServiceProviderParty;
            theServiceProviderParty = this.getServiceProviderParty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceProviderParty", theServiceProviderParty), currentHashCode, theServiceProviderParty);
        }
        {
            List<SignatureType> theSignature;
            theSignature = (((this.signature!= null)&&(!this.signature.isEmpty()))?this.getSignature():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "signature", theSignature), currentHashCode, theSignature);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
